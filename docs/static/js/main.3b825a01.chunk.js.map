{"version":3,"sources":["Field.tsx","store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Field","props","className","label","type","value","onChange","e","target","unit","store","key","defaults","JSON","parse","localStorage","getItem","error","val","setItem","stringify","DefaultState","risk","balance","stopLossPoints","pointProfit","pricePerLot","lever","lot","pos","App","useState","get","state","setState","window","timerRef","useRef","update","field","format","Number","v","setTimeout","s","Math","round","toFixed","current","clearTimeout","set","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3b825a01.chunk.js","sourcesContent":["import React from \"react\";\nexport interface Props {\n  label: string\n  value: string | number\n  onChange: (val: any) => void\n  unit?: any\n  type: string\n}\nconst Field = (props: Props) => {\n  return (\n    <div className=\"field is-horizontal\">\n      <div className=\"field-label is-normal\">\n        <label className=\"label\">{props.label}</label>\n      </div>\n      <div className=\"field-body\">\n        <div className=\"field\">\n          <p className=\"control has-icons-right\">\n            <input className=\"input\" type={props.type} value={props.value} onChange={e => props.onChange((e.target as any).value)} />\n            {props.unit && (\n              <span className=\"is-right icon\">\n                {props.unit}\n              </span>\n            )}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Field;\n","class Store {\n  get<V = any>(key: string, defaults: V): V\n  get<V = any>(key: string): V | null\n  get<V = any>(key: string, defaults?: V): V | null {\n    try {\n      return JSON.parse(localStorage.getItem(key)!) || defaults\n    } catch (error) {\n      return defaults!\n    }\n  }\n  set<V>(key: string, val: V) {\n    localStorage.setItem(key, JSON.stringify(val))\n  }\n}\n\nexport const store = new Store\n","import React, { useState, useRef } from 'react'\nimport logo from './logo.svg'\nimport 'bulma/css/bulma.min.css'\nimport './App.css'\nimport Field from './Field'\nimport { store } from './store';\nconst DefaultState = {\n  /** 每笔风险% */\n  risk: 2,\n  /** 账户总额 */\n  balance: 500,\n  /** 止损点数 */\n  stopLossPoints: 100,\n  /** 每点价格 */\n  pointProfit: 10,\n  /** 每手金额 */\n  pricePerLot: 100000,\n  /** 杠杆 */\n  lever: 2000,\n  /** 每笔手数 */\n  lot: 0,\n  /** 保证金 */\n  pos: 0,\n}\ntype State = typeof DefaultState\nconst StateKey = 'state'\n\nconst App: React.FC = () => {\n  let [state, setState] = useState(store.get<State>(StateKey, DefaultState))\n  ;(window as any)['store'] = store\n  let timerRef = useRef(null as any)\n  const update = (field: keyof (typeof state), format: (v: any) => any = Number) => (v: any) => {\n    setTimeout(() => {\n      setState(s => {\n        s = { ...s, [field]: format(v) }\n        s.lot = s.balance * (s.risk / 100) / (s.stopLossPoints * s.pointProfit)\n        s.lot = Math.round(s.lot * 100) / 100\n        s.pos = Number((s.pricePerLot * s.lot / s.lever).toFixed(2))\n        if (timerRef.current) {\n          clearTimeout(timerRef.current)\n          timerRef.current = null\n        }\n        timerRef.current = setTimeout(() => {\n          store.set(StateKey, s)\n          timerRef.current = null\n        }, 1000)\n        return s\n      })\n    })\n  }\n  return (\n    <div className=\"container root\">\n      <h1 className=\"title\">仓位计算器</h1>\n      <div className=\"columns is-mobile is-multiline is-centered\">\n        <div className=\"column is-half\">\n          <Field\n            type=\"number\"\n            label=\"账户余额\"\n            value={state.balance}\n            unit=\"$\"\n            onChange={update('balance')}\n          />\n        </div>\n        <div className=\"column is-half\">\n          <Field\n            type=\"number\"\n            label=\"每笔风险\"\n            value={state.risk}\n            unit=\"%\"\n            onChange={update('risk')}\n          />\n        </div>\n        <div className=\"column is-half\">\n          <Field\n            type=\"number\"\n            label=\"每点收益\"\n            value={state.pointProfit}\n            unit=\"$\"\n            onChange={update('pointProfit')}\n          />\n        </div>\n        <div className=\"column is-half\">\n          <Field\n            type=\"number\"\n            label=\"每手金额\"\n            value={state.pricePerLot}\n            unit=\"$\"\n            onChange={update('pricePerLot')}\n          />\n        </div>\n        <div className=\"column is-half\">\n          <Field\n            type=\"number\"\n            label=\"杠杆\"\n            value={state.lever}\n            onChange={update('lever')}\n          />\n        </div>\n        <div className=\"column is-half\">\n          <Field\n            type=\"number\"\n            label=\"止损点数\"\n            value={state.stopLossPoints}\n            onChange={update('stopLossPoints')}\n          />\n        </div>\n        <div className=\"column\">\n          <div className=\"notification is-primary\">\n            <div>\n              进场手数：<span className=\"result\">{state.lot}</span>\n            </div>\n            <div>\n              进场保证金：<span className=\"result\">{state.pos}</span> $\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}